<?xml version="1.0" encoding="UTF-8"?>
<!-- C module definition -->
<module xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://www.chibios.org/xml/schema/ccode/modules.xsd"
  name="drvlittlefs" descr="VFS LittleFS Driver"
  check="VFS_CFG_ENABLE_DRV_LITTLEFS == TRUE" sourcepath="drivers/littlefs"
  headerpath="drivers/littlefs" editcode="true">
  <imports>
    <import>vfs_nodes.xml</import>
    <import>vfs_drivers.xml</import>
  </imports>
  <public>
    <includes>
      <include style="regular">oop_sequential_stream.h</include>
      <include style="regular">lfs.h</include>
    </includes>
    <configs>
      <config name="DRV_CFG_LITTLEFS_FS_NUM" default="1">
        <brief>Maximum number of LittleFS file systems mounted.</brief>
        <assert invalid="$N &lt; 1" />
      </config>
      <config name="DRV_CFG_LITTLEFS_DIR_NODES_NUM" default="2">
        <brief>Number of directory nodes pre-allocated in the pool.</brief>
        <assert invalid="$N &lt; 2" />
      </config>
      <config name="DRV_CFG_LITTLEFS_FILE_NODES_NUM" default="2">
        <brief>Number of file nodes pre-allocated in the pool.</brief>
        <assert invalid="$N &lt; 1" />
      </config>
      <config name="DRV_CFG_LITTLEFS_INFO_NODES_NUM" default="1">
        <brief>Number of info nodes pre-allocated in the pool.</brief>
        <assert invalid="$N &lt; 1" />
      </config>
    </configs>
    <types>
      <class type="regular" name="vfs_littlefs_driver" namespace="lfsdrv"
        ancestorname="vfs_driver" descr="VFS LittleFS driver">
        <fields>
          <field name="lfs" ctype="lfs_t"></field>
          	<brief>LittleFS driver structure.</brief>
          <field name="name" ctype="const char$I*"></field>
            <brief>Volume name.</brief>
          <field name="cwd" ctype="struct vfs_littlefs_dir_node$I*"></field>
            <brief>Current working directory node.</brief>
          <field name="path_cwd" ctype='"char$I$N[LFS_NAME_MAX]"'></field>
            <brief>Current working directory path.</brief>
          <field name="scratch" ctype='"char$I$N[LFS_NAME_MAX]"'></field>
            <brief>Path scratch pad.</brief>
        </fields>
        <methods>
          <objinit callsuper="true">
            <implementation><![CDATA[]]></implementation>
          </objinit>
          <dispose>
            <implementation><![CDATA[]]></implementation>
          </dispose>
          <override>
            <method shortname="setcwd">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="getcwd">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="stat">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="opendir">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="openfile">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="unlink">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="rename">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="mkdir">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="rmdir">
              <implementation><![CDATA[]]></implementation>
            </method>
          </override>
        </methods>
      </class>
    </types>
    <variables>
      <variable name="vfs_littlefs_driver_static"
        ctype="struct vfs_littlefs_driver_static_struct">
        <brief>Global state of @p vfs_littlefs_driver_c</brief>
      </variable>
    </variables>
    <functions>
      <function name="__drv_littlefs_init" ctype="void">
        <brief>Module initialization.</brief>
        <init />
        <implementation><![CDATA[

  /* Initializing pools.*/
  chPoolObjectInit(&vfs_littlefs_driver_static.dir_nodes_pool,
                   sizeof (vfs_littlefs_dir_node_c),
                   chCoreAllocAlignedI);
  chPoolObjectInit(&vfs_littlefs_driver_static.file_nodes_pool,
                   sizeof (vfs_littlefs_file_node_c),
                   chCoreAllocAlignedI);
  chPoolObjectInit(&vfs_littlefs_driver_static.info_nodes_pool,
                   sizeof (struct lfs_info),
                   chCoreAllocAlignedI);
  chPoolObjectInit(&vfs_littlefs_driver_static.fs_pool,
                   sizeof (lfs_t),
                   chCoreAllocAlignedI);

  /* Preloading pools.*/
  chPoolLoadArray(&vfs_littlefs_driver_static.dir_nodes_pool,
                  &vfs_littlefs_driver_static.dir_nodes[0],
                  DRV_CFG_LITTLEFS_DIR_NODES_NUM);
  chPoolLoadArray(&vfs_littlefs_driver_static.file_nodes_pool,
                  &vfs_littlefs_driver_static.file_nodes[0],
                  DRV_CFG_LITTLEFS_FILE_NODES_NUM);
  chPoolLoadArray(&vfs_littlefs_driver_static.fs_pool,
                  &vfs_littlefs_driver_static.fs[0],
                  DRV_CFG_LITTLEFS_FS_NUM);]]></implementation>
      </function>
      <function name="lfsdrvMount" ctype="msg_t">
        <brief>Mounts a LittleFS volume.</brief>
        <param name="name" ctype="const char *" dir="in"><![CDATA[Name to be assigned to the volume.]]></param>
        <param name="cfgp" ctype="const struct lfs_config *cfgp" dir="in"><![CDATA[Pointer to @p lfs_config configuration.]]></param>
        <param name="objp" ctype="vfs_driver_c **objp" dir="in,out"><![CDATA[Pointer to pointer @p vfs_driver_c configuration.]]></param>
        <return>The operation result.</return>
        <api />
        <implementation><![CDATA[
  osalDbgAssert(cfgp != NULL, "null config");
  osalDbgAssert(name != NULL, "null volume name");
  osalDbgAssert(*name != '\0', "blank volume name");

  vfs_littlefs_driver_c *fs;
  int i;

  /* Check the volume name is not already in use.*/
  for (i = 0; i < DRV_CFG_LITTLEFS_FS_NUM; i++) {
    if (vfs_littlefs_driver_static.fs[i].name != NULL) {
      if (strcmp(vfs_littlefs_driver_static.fs[i].name, name) == 0) {
        return CH_RET_EEXIST;
      }
    }
  }

  /* Allocate a drive object.*/
  fs = (vfs_littlefs_driver_c *)chPoolAlloc(&vfs_littlefs_driver_static.fs_pool);
  if (fs == NULL) {
    return CH_RET_ENOMEM;
  }

  /* Initialise and mount the drive.*/
  if (lfsdrvObjectInit(fs, cfgp) != NULL) {

    /* Set the volume name and the returned object reference on success.*/
    fs->name = name;
    *obj = fs;
    return CH_RET_SUCCESS;
  }

  chPoolFree(&vfs_littlefs_driver_static.fs_pool, (void *)fs);
  return CH_RET_EIO;
]]></implementation>
      </function>
      <function name="lfsdrvUnmount" ctype="msg_t">
        <brief>Unmounts a LittleFS volume.</brief>
        <param name="name" ctype="const char *" dir="in"><![CDATA[Name of volume to be unmounted.]]></param>
        <return>The operation result.</return>
        <api />
        <implementation><![CDATA[
  osalDbgAssert(name != NULL, "null volume name");
  osalDbgAssert(*name != '\0', "blank volume name");

  int res;
  int i;

  for (i = 0; i < DRV_CFG_LITTLEFS_FS_NUM; i++) {
    if (strcmp(vfs_littlefs_driver_static.fs[i].name, name) == 0) {

      /* Unmount from LFS.*/
      res = lfs_unmount(&vfs_littlefs_driver_static.fs[i].lfs);

      /* Dispose the driver object.*/
      __lfsdrv_dispose_impl(&vfs_littlefs_driver_static.fs[i]);
      return translate_error(res);
    }
  }

  return CH_RET_EINVAL;
]]></implementation>
      </function>
    </functions>
  </public>
  <private>
    <includes_always>
      <include style="regular">vfs.h</include>
    </includes_always>
    <includes>
    	<include style="regular">lfs.h</include>
    </includes>
    <types>
      <class type="regular" name="vfs_littlefs_dir_node" namespace="lfsdir"
        ancestorname="vfs_directory_node" descr="VFS LittleFS directory node">
        <fields>
          <field name="dir" ctype="lfs_dir_t">
            <brief>LittleFS inner @p lfs_dir_t structure.</brief>
          </field>
        </fields>
        <methods>
          <objinit callsuper="false">
            <param name="driver" ctype="vfs_driver_c *" dir="in">Pointer to
              the controlling driver.</param>
            <param name="mode" ctype="vfs_mode_t" dir="in">Node mode flags.</param>
            <implementation><![CDATA[
self = __vfsdir_objinit_impl(ip, vmt, (vfs_driver_c *)driver, mode);]]></implementation>
          </objinit>
          <dispose>
            <implementation><![CDATA[]]></implementation>
          </dispose>
          <override>
            <method shortname="stat">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="first">
              <implementation><![CDATA[]]></implementation>
            </method>
            <method shortname="next">
              <implementation><![CDATA[]]></implementation>
            </method>
          </override>
        </methods>
      </class>
      <class type="regular" name="vfs_littlefs_file_node" namespace="lfsfile"
        ancestorname="vfs_file_node" descr="VFS LittleFS file node">
        <implements>
          <if name="sequential_stream">
            <method shortname="write">
              <implementation><![CDATA[
]]></implementation>
            </method>
            <method shortname="read">
              <implementation><![CDATA[
]]></implementation>
            </method>
            <method shortname="put">
              <implementation><![CDATA[
]]></implementation>
            </method>
            <method shortname="get">
              <implementation><![CDATA[
]]></implementation>
            </method>
          </if>
        </implements>
        <fields>
          <field name="file" ctype="lfs_file_t">
            <brief>LittleFS inner @p lfs_file_t structure.</brief>
          </field>
        </fields>
        <methods>
          <objinit callsuper="false">
            <param name="driver" ctype="vfs_driver_c *" dir="in">Pointer to
              the controlling driver.
            </param>
            <param name="mode" ctype="vfs_mode_t" dir="in">Node mode flags.
            </param>
            <implementation><![CDATA[
self = __vfsfile_objinit_impl(ip, vmt, (vfs_driver_c *)driver, mode);]]></implementation>
          </objinit>
          <dispose>
            <implementation><![CDATA[]]></implementation>
          </dispose>
          <override>
            <method shortname="stat">
              <implementation><![CDATA[
]]></implementation>
            </method>
            <method shortname="read">
              <implementation><![CDATA[
]]></implementation>
            </method>
            <method shortname="write">
              <implementation><![CDATA[
]]></implementation>
            </method>
            <method shortname="setpos">
              <implementation><![CDATA[
]]></implementation>
            </method>
            <method shortname="getpos">
              <implementation><![CDATA[
]]></implementation>
            </method>
            <method shortname="getstream">
              <implementation><![CDATA[
]]></implementation>
            </method>
          </override>
        </methods>
      </class>
      <struct name="vfs_littlefs_driver_static_struct">
        <brief>Global state of @p vfs_littlefs_driver_c.</brief>
        <fields>
          <field name="fs_pool" ctype="memory_pool_t">
            <brief>Pool of file system objects.</brief>
          </field>
          <field name="info_nodes_pool" ctype="memory_pool_t">
            <brief>Pool of file info objects.</brief>
          </field>
          <field name="dir_nodes_pool" ctype="memory_pool_t">
            <brief>Pool of directory nodes.</brief>
          </field>
          <field name="file_nodes_pool" ctype="memory_pool_t">
            <brief>Pool of file nodes.</brief>
          </field>
          <field name="fs" ctype="lfs_t$I$N[DRV_CFG_LITTLEFS_FS_NUM]">
            <brief>Pool of file system objects.</brief>
          </field>
          <field name="info_nodes"
            ctype="vfs_littlefs_info_node_c$I$N[DRV_CFG_LITTLEFS_INFO_NODES_NUM]">
            <brief>Static storage of info nodes.</brief>
          </field>
          <field name="dir_nodes"
            ctype="vfs_littlefs_dir_node_c$I$N[DRV_CFG_LITTLEFS_DIR_NODES_NUM]">
            <brief>Static storage of directory nodes.</brief>
          </field>
          <field name="file_nodes"
            ctype="vfs_littlefs_file_node_c$I$N[DRV_CFG_LITTLEFS_FILE_NODES_NUM]">
            <brief>Static storage of file nodes.</brief>
          </field>
        </fields>
      </struct>
    </types>
  </private>
</module>