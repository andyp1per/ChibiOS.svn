<?xml version="1.0" encoding="UTF-8"?>
<module xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="http://www.chibios.org/xml/schema/ccode/modules.xsd"
  name="hal_snor_base" descr="SNOR Base Driver" editcode="false">
  <brief>SNOR abstract driver.</brief>
  <details><![CDATA[Base class for SNOR flash devices.]]></details>
  <imports>
    <import>oop_base_object.xml</import>
    <import>hal_flash_interface.xml</import>
  </imports>
  <public>
    <includes>
      <include style="regular">oop_base_object.h</include>
      <include style="regular">oop_base_interface.h</include>
      <include style="regular">hal_flash_interface.h</include>
    </includes>
    <definitions_early>
      <group description="Bus types">
        <define name="XSNOR_BUS_TYPE_WSPI" value="0">
          <brief>Bus type is WSPI.</brief>
        </define>
        <define name="XSNOR_BUS_TYPE_SPI" value="1">
          <brief>Bus type is SPI.</brief>
        </define>
      </group>
    </definitions_early>
    <configs>
      <config name="XSNOR_BUFFER_SIZE" default="32">
        <brief>Non-cacheable operations buffer.</brief>
        <assert invalid="$N &lt; 32">XSNOR_BUFFER_SIZE minimum is 32</assert>
      </config>
      <config name="XSNOR_USE_SPI" default="TRUE">
        <brief>SPI support enable switch.</brief>
        <assert invalid="($N != FALSE) &amp;&amp; ($N != TRUE)">
         XSNOR_USE_SPI invalid value</assert>
      </config>
      <config name="XSNOR_USE_WSPI" default="TRUE">
        <brief>WSPI support enable switch.</brief>
        <assert invalid="($N != FALSE) &amp;&amp; ($N != TRUE)">
         XSNOR_USE_WSPI invalid value</assert>
      </config>
      <config name="XSNOR_SHARED_BUS" default="TRUE">
        <brief>Bus share support enable switch.</brief>
        <assert invalid="($N != FALSE) &amp;&amp; ($N != TRUE)">
         XSNOR_SHARED_BUS invalid value</assert>
      </config>
      <verbatim><![CDATA[
/* Other consistency checks.*/
#if (XSNOR_USE_SPI == FALSE) && (XSNOR_USE_WSPI == FALSE)
#error "XSNOR_USE_SPI or XSNOR_USE_WSPI must be enabled"
#endif
#if (XSNOR_USE_SPI == TRUE) && (HAL_USE_SPI == FALSE)
#error "XSNOR_USE_SPI requires HAL_USE_SPI"
#endif
#if (XSNOR_USE_WSPI == TRUE) && (HAL_USE_WSPI == FALSE)
#error "XSNOR_USE_WSPI requires HAL_USE_WSPI"
#endif
]]></verbatim>
    </configs>
    <definitions_late>
      <define name="XSNOR_USE_BOTH" value="((XSNOR_USE_SPI == TRUE) &amp;&amp; (XSNOR_USE_WSPI == TRUE))">
        <brief>This switch is @p TRUE if both SPI and WSPI are in use.</brief></define>
    </definitions_late>
    <macros>
      <condition check="XSNOR_SHARED_BUS == FALSE">
        <group description="Bus mutex macros when sharing is disabled">
          <macro name="__xsnor_bus_acquire">
            <param name="self"></param>
            <implementation></implementation>
          </macro>
          <macro name="__xsnor_bus_release">
            <param name="self"></param>
            <implementation></implementation>
          </macro>
        </group>
      </condition>
    </macros>
    <types>
      <typedef name="snor_buffers_t">
        <brief>Type of a non-cacheable buffer.</brief>
        <basetype ctype="struct snor_buffers" />
      </typedef>
      <typedef name="snor_config_t">
        <brief>Type of a SNOR configuration structure.</brief>
        <basetype ctype="struct snor_config" />
      </typedef>
      <typedef name="snor_commands_t">
        <brief>Type of a commands configuration structure.</brief>
        <basetype ctype="struct snor_commands" />
      </typedef>
      <struct name="snor_buffers">
        <brief>SNOR driver configuration.</brief>
        <fields>
          <field name="databuf" ctype="uint8_t$I$N[XSNOR_BUFFER_SIZE]">
            <brief>Non-cacheable data buffer.</brief>
          </field>
          <condition check="XSNOR_USE_WSPI == TRUE">
            <field name="cmdbuf" ctype="wspi_command_t">
              <brief>Non-cacheable WSPI command buffer.</brief>
            </field>
          </condition>
          <condition check="XSNOR_USE_SPI == TRUE">
            <field name="spibuf" ctype="uint8_t$I$N[8]">
              <brief>Non-cacheable SPI buffer.</brief>
            </field>
          </condition>
        </fields>
      </struct>
      <struct name="snor_commands">
        <brief>SNOR command configuration structure.</brief>
        <fields>
          <field name="cmd" ctype="uint32_t">
            <brief>Command only.</brief>
          </field>
          <field name="cmd_addr" ctype="uint32_t">
            <brief>Command and address.</brief>
          </field>
          <field name="cmd_data" ctype="uint32_t">
            <brief>Command and data.</brief>
          </field>
          <field name="cmd_addr_data" ctype="uint32_t">
            <brief>Command, address and data.</brief>
          </field>
        </fields>
      </struct>
      <condition check="XSNOR_USE_WSPI == TRUE">
        <struct name="snor_bus_wspi">
          <brief>WSPI-specific configuration fields.</brief>
          <fields>
            <field name="drv" ctype="WSPIDriver$I*$N">
              <brief>WSPI driver to be used for physical communication.</brief>
            </field>
            <field name="cfg" ctype="const WSPIConfig$I*$N">
              <brief>WSPI driver configuration.</brief>
            </field>
          </fields>
        </struct>
      </condition>
      <condition check="XSNOR_USE_SPI == TRUE">
        <struct name="snor_bus_spi">
          <brief>SPI-specific configuration fields.</brief>
          <fields>
            <field name="drv" ctype="SPIDriver$I*$N">
              <brief>SPI driver to be used for physical communication.</brief>
            </field>
            <field name="cfg" ctype="const SPIConfig$I*$N">
              <brief>SPI driver configuration.</brief>
            </field>
          </fields>
        </struct>
      </condition>
      <union name="snor_bus_configs">
        <brief>Union of possible bus configurations.</brief>
        <fields>
          <condition check="XSNOR_USE_WSPI == TRUE">
            <field name="wspi" ctype="struct snor_bus_wspi" />
          </condition>
          <condition check="XSNOR_USE_SPI == TRUE">
            <field name="spi" ctype="struct snor_bus_spi" />
          </condition>
        </fields>
      </union>
      <struct name="snor_config">
        <brief>SNOR driver configuration.</brief>
        <fields>
          <condition check="XSNOR_USE_BOTH == TRUE">
            <field name="bus_type" ctype="int">
              <brief>Bus type selection switch.</brief>
            </field>
          </condition>
          <field name="bus" ctype="union snor_bus_configs">
            <brief>WSPI driver configuration.</brief>
          </field>
          <field name="buffers" ctype="snor_buffers_t$I*$N">
            <brief>Pointer to the non-cacheable buffers.</brief>
          </field>
        </fields>
      </struct>
      <class name="hal_snor_base" type="abstract" namespace="xsnor"
        descr="SNOR base driver" ancestorname="base_object">
        <brief>Base class of all SNOR drivers.</brief>
        <implements>
          <if name="flash_interface">
            <method shortname="get_descriptor">
              <implementation><![CDATA[

return snor_device_get_descriptor(self);]]></implementation>
            </method>
            <method shortname="read">
              <implementation><![CDATA[
flash_error_t err;

osalDbgCheck((self != NULL) && (rp != NULL) && (n > 0U));
osalDbgAssert((self->state == FLASH_READY) || (self->state == FLASH_ERASE),
              "invalid state");

if (self->state == FLASH_ERASE) {
  return FLASH_BUSY_ERASING;
}

/* Bus acquired.*/
__xsnor_bus_acquire(self);

/* FLASH_READY state while the operation is performed.*/
self->state = FLASH_READ;

/* Actual read implementation.*/
err = snor_device_read(self, offset, n, rp);

/* Ready state again.*/
self->state = FLASH_READY;

/* Bus released.*/
__xsnor_bus_release(self);

return err;]]></implementation>
            </method>
            <method shortname="program">
              <implementation><![CDATA[
flash_error_t err;

osalDbgCheck((self != NULL) && (pp != NULL) && (n > 0U));
osalDbgAssert((self->state == FLASH_READY) || (self->state == FLASH_ERASE),
              "invalid state");

if (self->state == FLASH_ERASE) {
  return FLASH_BUSY_ERASING;
}

/* Bus acquired.*/
__xsnor_bus_acquire(self);

/* FLASH_PGM state while the operation is performed.*/
self->state = FLASH_PGM;

/* Actual program implementation.*/
err = snor_device_program(self, offset, n, pp);

/* Ready state again.*/
self->state = FLASH_READY;

/* Bus released.*/
__xsnor_bus_release(self);

return err;]]></implementation>
            </method>
            <method shortname="start_erase_all">
              <implementation><![CDATA[
flash_error_t err;

osalDbgCheck(self != NULL);
osalDbgAssert((self->state == FLASH_READY) || (self->state == FLASH_ERASE),
              "invalid state");

if (self->state == FLASH_ERASE) {
  return FLASH_BUSY_ERASING;
}

/* Bus acquired.*/
__xsnor_bus_acquire(self);

/* FLASH_ERASE state while the operation is performed.*/
self->state = FLASH_ERASE;

/* Actual erase implementation.*/
err = snor_device_start_erase_all(self);

/* Bus released.*/
__xsnor_bus_release(self);

return err;]]></implementation>
            </method>
            <method shortname="start_erase_sector">
              <implementation><![CDATA[
flash_error_t err;

osalDbgCheck(self != NULL);
osalDbgAssert((self->state == FLASH_READY) || (self->state == FLASH_ERASE),
              "invalid state");

if (self->state == FLASH_ERASE) {
  return FLASH_BUSY_ERASING;
}

/* Bus acquired.*/
__xsnor_bus_acquire(self);

/* FLASH_ERASE state while the operation is performed.*/
self->state = FLASH_ERASE;

/* Actual erase implementation.*/
err = snor_device_start_erase_sector(self, sector);

/* Bus released.*/
__xsnor_bus_release(self);

return err;]]></implementation>
            </method>
            <method shortname="query_erase">
              <implementation><![CDATA[
flash_error_t err;

osalDbgCheck(self != NULL);
osalDbgAssert((self->state == FLASH_READY) || (self->state == FLASH_ERASE),
              "invalid state");

/* If there is an erase in progress then the device must be checked.*/
if (self->state == FLASH_ERASE) {

  /* Bus acquired.*/
  __xsnor_bus_acquire(self);

  /* Actual query erase implementation.*/
  err = snor_device_query_erase(self, msec);

  /* The device is ready to accept commands.*/
  if (err == FLASH_NO_ERROR) {
    self->state = FLASH_READY;
  }

  /* Bus released.*/
  __xsnor_bus_release(self);
}
else {
  err = FLASH_NO_ERROR;
}

return err;]]></implementation>
            </method>
            <method shortname="verify_erase">
              <implementation><![CDATA[
flash_error_t err;

osalDbgCheck(self != NULL);
osalDbgAssert((self->state == FLASH_READY) || (self->state == FLASH_ERASE),
              "invalid state");

if (self->state == FLASH_ERASE) {
  return FLASH_BUSY_ERASING;
}

/* Bus acquired.*/
__xsnor_bus_acquire(self);

/* FLASH_READY state while the operation is performed.*/
self->state = FLASH_READ;

/* Actual verify erase implementation.*/
err = snor_device_verify_erase(self, sector);

/* Ready state again.*/
self->state = FLASH_READY;

/* Bus released.*/
__xsnor_bus_release(self);

return err;]]></implementation>
            </method>
            <method shortname="acquire_exclusive">
              <implementation><![CDATA[

osalMutexLock(&self->mutex);
return FLASH_NO_ERROR;
]]></implementation>
            </method>
            <method shortname="release_exclusive">
              <implementation><![CDATA[

osalMutexUnlock(&self->mutex);
return FLASH_NO_ERROR;
]]></implementation>
            </method>
          </if></implements>
        <fields>
          <field name="state" ctype="flash_state_t">
            <brief>Driver state.</brief></field>
          <field name="config" ctype="const snor_config_t$I*$N">
            <brief>Driver configuration.</brief></field>
          <field name="commands" ctype="const snor_commands_t$I*$N">
            <brief>Current commands configuration.</brief>
            <note>This field is initialized in subclasses.</note>
          </field>
          <field name="mutex" ctype="mutex_t">
            <brief>Flash access mutex.</brief></field>
        </fields>
        <methods>
          <objinit callsuper="true">
            <implementation><![CDATA[
self->state = FLASH_UNINIT;
self->config = NULL;
osalMutexObjectInit(&self->mutex);]]></implementation>
          </objinit>
          <dispose>
            <implementation><![CDATA[;]]></implementation>
          </dispose>
          <virtual>
            <method shortname="init" name="snor_device_init" ctype="flash_error_t">
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">Initialization successful.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">Initialization failed.</retval>
              <notapi />
            </method>
            <method shortname="get_descriptor" name="snor_device_get_descriptor" ctype="const flash_descriptor_t *">
              <notapi />
            </method>
            <method shortname="read" name="snor_device_read" ctype="flash_error_t">
              <brief>Read operation.</brief>
              <param name="offset" ctype="flash_offset_t" dir="in">flash offset</param>
              <param name="n" ctype="size_t" dir="in">number of bytes to be read</param>
              <param name="rp" ctype="uint8_t *" dir="out">pointer to the data buffer</param>
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">Operation successful.</retval>
              <retval value="FLASH_ERROR_READ">If the read operation failed.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">If access to the memory failed.</retval>
              <notapi />
            </method>
            <method shortname="program" name="snor_device_program" ctype="flash_error_t">
              <brief>Program operation.</brief>
              <param name="offset" ctype="flash_offset_t" dir="in">flash offset</param>
              <param name="n" ctype="size_t" dir="in">number of bytes to be programmed</param>
              <param name="pp" ctype="const uint8_t *" dir="in">pointer to the data buffer</param>
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">Operation successful.</retval>
              <retval value="FLASH_ERROR_PROGRAM">If the program operation failed.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">If access to the memory failed.</retval>
              <notapi />
            </method>
            <method shortname="start_erase_all" name="snor_device_start_erase_all" ctype="flash_error_t">
              <brief>Starts a whole-device erase operation.</brief>
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">Operation successful.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">If access to the memory failed.</retval>
              <notapi />
            </method>
            <method shortname="start_erase_sector" name="snor_device_start_erase_sector" ctype="flash_error_t">
              <brief>Starts an sector erase operation.</brief>
              <param name="sector" ctype="const flash_sector_t *" dir="in">sector to be erased</param>
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">Operation successful.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">If access to the memory failed.</retval>
              <notapi />
            </method>
            <method shortname="query_erase" name="snor_device_query_erase" ctype="flash_error_t">
              <brief>Queries the driver for erase operation progress.</brief>
              <param name="msec" ctype="unsigned *" dir="out">recommended time, in milliseconds,
               that should be spent before calling this function again, can be @p NULL</param>
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">If there is no erase operation in progress.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">If access to the memory failed.</retval>
              <notapi />
            </method>
            <method shortname="verify_erase" name="snor_device_verify_erase" ctype="flash_error_t">
              <brief>Returns the erase state of a sector.</brief>
              <param name="sector" ctype="const flash_sector_t *" dir="in">sector to be verified</param>
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">Operation successful.</retval>
              <retval value="FLASH_ERROR_VERIFY">If the verify operation failed.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">If access to the memory failed.</retval>
              <notapi />
            </method>
            <method shortname="mmap_on" name="snor_device_mmap_on" ctype="flash_error_t">
              <param name="addrp" ctype="uint8_t **" dir="out">pointer to the
               memory mapped memory or @p NULL</param>
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">Memory map mode successful.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">Memory map mode failed.</retval>
              <notapi />
            </method>
            <method shortname="mmap_off" name="snor_device_mmap_off" ctype="void">
              <notapi />
            </method>
          </virtual>
          <regular>
            <condition check="XSNOR_SHARED_BUS == TRUE">
              <method name="__xsnor_bus_acquire" ctype="void">
                <brief>Bus acquisition and lock.</brief>
                <implementation><![CDATA[

#if XSNOR_USE_BOTH == TRUE
if (self->config->bus_type == XSNOR_BUS_TYPE_WSPI) {
#endif
#if XSNOR_USE_WSPI == TRUE
  wspiAcquireBus(self->config->bus.wspi.drv);
  if (self->config->bus.wspi.cfg != self->config->bus.wspi.drv->config) {
    wspiStart(self->config->bus.wspi.drv, self->config->bus.wspi.drv->config);
  }
#endif
#if XSNOR_USE_BOTH == TRUE
}
else {
#endif
#if XSNOR_USE_SPI == TRUE
  spiAcquireBus(self->config->bus.spi.drv);
  if (self->config->bus.spi.cfg != self->config->bus.spi.drv->config) {
    spiStart(self->config->bus.spi.drv, self->config->bus.spi.drv->config);
  }
#endif
#if XSNOR_USE_BOTH == TRUE
}
#endif]]></implementation>
              </method>
              <method name="__xsnor_bus_release" ctype="void">
                <brief>Bus release and unlock.</brief>
                <implementation><![CDATA[

#if XSNOR_USE_BOTH == TRUE
if (self->config->bus_type == XSNOR_BUS_TYPE_WSPI) {
#endif
#if XSNOR_USE_WSPI == TRUE
  wspiReleaseBus(self->config->bus.wspi.drv);
#endif
#if XSNOR_USE_BOTH == TRUE
}
else {
#endif
#if XSNOR_USE_SPI == TRUE
  spiReleaseBus(self->config->bus.spi.drv);
#endif
#if XSNOR_USE_BOTH == TRUE
}
#endif]]></implementation>
              </method>
            </condition>
            <method name="__xsnor_bus_cmd" ctype="void">
              <brief>Sends a naked command.</brief>
              <param name="cmd" ctype="uint32_t" dir="in">instruction code</param>
              <implementation><![CDATA[
const snor_config_t *config = self->config;

#if XSNOR_USE_BOTH == TRUE
if (config->bus_type == XSNOR_BUS_TYPE_WSPI) {
#endif
#if XSNOR_USE_WSPI == TRUE
  wspi_command_t mode;

  mode.cmd   = cmd;
  mode.cfg   = self->commands->cmd;
  mode.addr  = 0U;
  mode.alt   = 0U;
  mode.dummy = 0U;
  wspiCommand(config->bus.wspi.drv, &mode);
#endif
#if XSNOR_USE_BOTH == TRUE
}
else {
#endif
#if XSNOR_USE_SPI == TRUE

  spiSelect(config->bus.spi.drv);
  config->buffers->spibuf[0] = cmd;
  spiSend(config->bus.spi.drv, 1, config->buffers->spibuf);
  spiUnselect(config->bus.spi.drv);
#endif
#if XSNOR_USE_BOTH == TRUE
}
#endif]]></implementation>
            </method>
            <method name="__xsnor_bus_cmd_send" ctype="void">
              <brief>Sends a command followed by a data transmit phase.</brief>
              <param name="cmd" ctype="uint32_t" dir="in">instruction code</param>
              <param name="n" ctype="size_t" dir="in">number of bytes to transmit</param>
              <param name="p" ctype="const uint8_t *" dir="in">data buffer</param>
              <implementation><![CDATA[
const snor_config_t *config = self->config;

#if XSNOR_USE_BOTH == TRUE
if (config->bus_type == XSNOR_BUS_TYPE_WSPI) {
#endif
#if XSNOR_USE_WSPI == TRUE
  wspi_command_t mode;

  mode.cmd   = cmd;
  mode.cfg   = self->commands->cmd_data;
  mode.addr  = 0U;
  mode.alt   = 0U;
  mode.dummy = 0U;
  wspiSend(config->bus.wspi.drv, &mode, n, p);
#endif
#if XSNOR_USE_BOTH == TRUE
}
else {
#endif
#if XSNOR_USE_SPI == TRUE

  spiSelect(config->bus.spi.drv);
  config->buffers->spibuf[0] = cmd;
  spiSend(config->bus.spi.drv, 1, config->buffers->spibuf);
  spiSend(config->bus.spi.drv, n, p);
  spiUnselect(config->bus.spi.drv);
#endif
#if XSNOR_USE_BOTH == TRUE
}
#endif]]></implementation>
            </method>
            <method name="__xsnor_bus_cmd_receive" ctype="void">
              <brief>Sends a command followed by a data receive phase.</brief>
              <param name="cmd" ctype="uint32_t" dir="in">instruction code</param>
              <param name="n" ctype="size_t" dir="in">number of bytes to receive</param>
              <param name="p" ctype="uint8_t *" dir="out">data buffer</param>
              <implementation><![CDATA[
const snor_config_t *config = self->config;

#if XSNOR_USE_BOTH == TRUE
if (config->bus_type == XSNOR_BUS_TYPE_WSPI) {
#endif
#if XSNOR_USE_WSPI == TRUE
  wspi_command_t mode;

  mode.cmd   = cmd;
  mode.cfg   = self->commands->cmd_data;
  mode.addr  = 0U;
  mode.alt   = 0U;
  mode.dummy = 0U;
  wspiReceive(config->bus.wspi.drv, &mode, n, p);
#endif
#if XSNOR_USE_BOTH == TRUE
}
else {
#endif
#if XSNOR_USE_SPI == TRUE

  spiSelect(config->bus.spi.drv);
  config->buffers->spibuf[0] = cmd;
  spiSend(config->bus.spi.drv, 1, config->buffers->spibuf);
  spiReceive(config->bus.spi.drv, n, p);
  spiUnselect(config->bus.spi.drv);
#endif
#if XSNOR_USE_BOTH == TRUE
}
#endif]]></implementation>
            </method>
            <method name="xsnorStart" ctype="flash_error_t">
              <brief>Configures and activates a SNOR driver.</brief>
              <param name="config" ctype="const snor_config_t *" dir="in">pointer to the configuration</param>
              <return>An error code.</return>
              <retval value="FLASH_NO_ERROR">Operation successful.</retval>
              <retval value="FLASH_ERROR_HW_FAILURE">If initialization failed.</retval>
              <api />
              <implementation><![CDATA[
flash_error_t err;

osalDbgCheck((self != NULL) && (config != NULL));
osalDbgAssert(self->state != FLASH_UNINIT, "invalid state");

self->config = config;

if (self->state == FLASH_STOP) {

  /* Bus acquisition.*/
  __xsnor_bus_acquire(self);

#if XSNOR_USE_BOTH == TRUE
  if (self->config->bus_type == XSNOR_BUS_TYPE_WSPI) {
#endif
    wspiStart(self->config->bus.wspi.drv, self->config->bus.wspi.cfg);
#if XSNOR_USE_BOTH == TRUE
  }
else {
#endif
    spiStart(self->config->bus.spi.drv, self->config->bus.spi.cfg);
#if XSNOR_USE_BOTH == TRUE
  }
#endif

  /* Device identification and initialization.*/
  err = snor_device_init(self);
  if (err == FLASH_NO_ERROR) {
    /* Driver in ready state.*/
    self->state = FLASH_READY;
  }

  /* Bus release.*/
  __xsnor_bus_release(self);
}

return err;]]></implementation>
            </method>
            <method name="xsnorStop" ctype="void">
              <brief>Deactivates a SNOR driver.</brief>
              <api />
              <implementation><![CDATA[
osalDbgCheck(self != NULL);
osalDbgAssert(self->state != FLASH_UNINIT, "invalid state");

if (self->state != FLASH_STOP) {

  /* Stopping bus device.*/
#if XSNOR_USE_BOTH == TRUE
  if (self->config->bus_type == XSNOR_BUS_TYPE_WSPI) {
#endif
    wspiStop(self->config->bus.wspi.drv);
#if XSNOR_USE_BOTH == TRUE
  }
else {
#endif
    spiStop(self->config->bus.spi.drv);
#if XSNOR_USE_BOTH == TRUE
  }
#endif

  /* Driver stopped.*/
  self->state = FLASH_STOP;

  /* Deleting current configuration.*/
  self->config = NULL;
}]]></implementation>
            </method>
            <condition check="WSPI_SUPPORTS_MEMMAP == TRUE">
              <method name="xsnorMemoryMap" ctype="flash_error_t">
                <brief>Enters the memory mapped mode.</brief>
                <param name="addrp" ctype="uint8_t **" dir="out">pointer to the
                 memory mapped memory or @p NULL</param>
                <return>An error code.</return>
                <retval value="FLASH_NO_ERROR">Operation successful.</retval>
                <retval value="FLASH_ERROR_HW_FAILURE">If memory mapped mode failed.</retval>
                <api />
                <implementation>
flash_error_t err;

/* Activating XIP mode in the device.*/
err = snor_device_mmap_on(self, addrp);

return err;</implementation>
              </method>
              <method name="xsnorMemoryUnmap" ctype="void">
                <brief>Leaves the memory mapped mode.</brief>
                <api />
                <implementation>

snor_device_mmap_off(self);</implementation>
              </method>
            </condition>
            
          </regular>
        </methods>
      </class>
      
    </types>
    <variables></variables>
    <functions></functions>
  </public>
  <private>
    <includes>
      <include style="regular">hal.h</include>
      <include style="regular">hal_snor_base.h</include>
    </includes>
    <functions></functions>
  </private>
</module>
